{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","nrOfPlayers","setNrOfPlayers","firstDart","setFirstDart","secondDart","setSecondDart","thirdDart","setThirdDart","firstDartMultiplayer","setFirstDartMultiplayer","secondDartMultiplayer","setSecondDartMultiplayer","thirdDartMultuplayer","setThirdDartMultiplayer","gameStarted","setGameStarted","activePlayer","setActivePlayer","players","setPlayers","className","map","player","index","key","name","score","type","value","onChange","ev","target","placeholder","class","id","checked","htmlFor","onClick","parseInt","newPlayers","length","handleEndTurn","i","push","handleNrOfPlayersChange","idx","handlePlayerName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.454ff98e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [nrOfPlayers, setNrOfPlayers] = useState(0);\n  // Darts\n  const [firstDart, setFirstDart] = useState(0);\n  const [secondDart, setSecondDart] = useState(0);\n  const [thirdDart, setThirdDart] = useState(0);\n\n  const [firstDartMultiplayer, setFirstDartMultiplayer] = useState(1);\n  const [secondDartMultiplayer, setSecondDartMultiplayer] = useState(1);\n  const [thirdDartMultuplayer, setThirdDartMultiplayer] = useState(1);\n\n  const [gameStarted, setGameStarted] = useState(false);\n  const [activePlayer, setActivePlayer] = useState(0);\n  const [players, setPlayers] = useState([]); \n  const handlePlayerName = (value, idx) => {\n    const newPlayers = players.map((player, index) => {\n      if(index === idx) {\n        player.name = value;\n      }\n      return player;\n    })\n    setPlayers(newPlayers);\n\n  }\n  const handleNrOfPlayersChange = (value) => {\n    setNrOfPlayers(value);\n    const players = [];\n    for(let i=0; i < value; i++) {\n      players.push({\n        name: '',\n        score: 501,\n      });\n    }\n    setPlayers(players);\n  }\n  const handleEndTurn = (activePlayer) => {\n    // Score \n    const score = parseInt(firstDart) * parseInt(firstDartMultiplayer) + parseInt(secondDart) * parseInt(secondDartMultiplayer) + parseInt(thirdDart) * parseInt(thirdDartMultuplayer);\n\n    const newPlayers = players.map((player, index) => {\n      if(index === activePlayer) {\n        player.score = player.score - score;\n      }\n      return player;\n    })\n    setPlayers(newPlayers);\n\n    // Reset Darts \n\n    setFirstDart(0)\n    setSecondDart(0)\n    setThirdDart(0)\n\n    // Next Turn\n    if (activePlayer === players.length - 1) {\n      setActivePlayer(0)\n    } else {\n      setActivePlayer(activePlayer + 1);\n    }\n  }\n  return (\n    <div className=\"App\">\n      {gameStarted ? <div>\n        <div className=\"stickyBar fixed-top\">\n          {players.map((player, index) => \n          <div key={index} className=\"player\">\n            <div className=\"name\">{player.name}</div>\n            <div className=\"score\">{player.score}</div>\n          </div>\n          )}\n        </div> \n        <div className=\"active-player col-12\">\n            <h3>{players[activePlayer].name} Turn</h3>\n            <div className=\"form-group\">\n              <input type=\"number\" className=\"form-control\" value={firstDart} onChange={(ev) => setFirstDart(ev.target.value)} placeholder=\"First Dart\"  />\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"1\" value=\"1\" onChange={(ev) => setFirstDartMultiplayer(ev.target.value)} id=\"1inlineRadio1\" checked />\n                <label class=\"form-check-label\" htmlFor=\"1inlineRadio1\">Normal</label>\n              </div>\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"1\" onChange={(ev) => setFirstDartMultiplayer(ev.target.value)} value=\"2\" id=\"1inlineRadio2\" />\n                <label class=\"form-check-label\" htmlFor=\"1inlineRadio2\">Double</label>\n              </div>\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"1\" onChange={(ev) => setFirstDartMultiplayer(ev.target.value)} value=\"3\" id=\"1inlineRadio3\" />\n                <label class=\"form-check-label\" htmlFor=\"1inlineRadio3\">Triple</label>\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <input type=\"number\" className=\"form-control\" value={secondDart} onChange={(ev) => setSecondDart(ev.target.value)} placeholder=\"Second Dart\" />\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"2\" onChange={(ev) => setSecondDartMultiplayer(ev.target.value)} value=\"1\"  id=\"2inlineRadio1\" checked/>\n                <label class=\"form-check-label\" htmlFor=\"2inlineRadio1\">Normal</label>\n              </div>\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"2\" onChange={(ev) => setSecondDartMultiplayer(ev.target.value)} value=\"2\" id=\"2inlineRadio2\" />\n                <label class=\"form-check-label\" htmlFor=\"2inlineRadio2\">Double</label>\n              </div>\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"2\" onChange={(ev) => setSecondDartMultiplayer(ev.target.value)} value=\"3\" id=\"2inlineRadio3\" />\n                <label class=\"form-check-label\" htmlFor=\"2inlineRadio3\">Triple</label>\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <input type=\"number\" className=\"form-control\" value={thirdDart} onChange={(ev) => setThirdDart(ev.target.value)} placeholder=\"Third Dart\" />\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"3\" onChange={(ev) => setThirdDartMultiplayer(ev.target.value)} value=\"1\" id=\"3inlineRadio1\" checked />\n                <label class=\"form-check-label\" htmlFor=\"3inlineRadio1\">Normal</label>\n              </div>\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"3\" onChange={(ev) => setThirdDartMultiplayer(ev.target.value)} value=\"2\" id=\"3inlineRadio2\" />\n                <label class=\"form-check-label\" htmlFor=\"3inlineRadio2\">Double</label>\n              </div>\n              <div class=\"form-check form-check-inline\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"3\" onChange={(ev) => setThirdDartMultiplayer(ev.target.value)} value=\"3\" id=\"3inlineRadio3\" />\n                <label class=\"form-check-label\" htmlFor=\"3inlineRadio3\">Triple</label>\n              </div>\n            </div>\n            <button onClick={(ev) => handleEndTurn(activePlayer)} type=\"button\" className=\"btn btn-primary\">End Turn</button>\n        </div>\n      </div>\n      : \n      <div className=\"row\">\n        <div className=\"container\">\n          <div className=\"col-12\">\n            <h2>Choose nr of players</h2>\n            <div className=\"form-group\">\n              <label htmlFor=\"nrOfPlayers\">Number of Players</label>\n              <input type=\"number\" className=\"form-control\" value={nrOfPlayers} onChange={(ev) => handleNrOfPlayersChange(ev.target.value)} id=\"nrOfPlayers\" placeholder=\"Number of Players\" />\n            </div>\n            {players.map((player, index) => (\n              <div key={index} className=\"form-group\">\n                <input type=\"text\" className=\"form-control\" value={player.name} onChange={(ev) => handlePlayerName(ev.target.value, index)} placeholder=\"Player Name\" />\n              </div>\n            ))}\n            <button onClick={(ev) => setGameStarted(true)} type=\"button\" className=\"btn btn-primary\">Start Game</button>\n          </div>\n        </div>\n      </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}